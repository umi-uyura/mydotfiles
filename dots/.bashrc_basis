#!/usr/bin/env bash
# .bashrc_basis: Entry point to my .bashrc

# Enable mystartup_debug_echo function
# shellcheck disable=SC2034
MYSTARTUP_DEBUG=false

#
# Shell configurations
#

for file in $HOME/dotfiles/shell/{bash_prompt,exports,functions,alias,options,completion}; do
  # shellcheck source=/dev/null
  [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;


#
# OS settings
#

if [ "$(uname)" == 'Linux' ]; then
  # Linux
  mystartup_debug_echo "... Load settings for Linux"
  # shellcheck source=/dev/null
  . "$HOME/dotfiles/dots/linux/.bashrc_linux"

  if [[ "$(uname -r)" == *microsoft* ]]; then
    # WSL
    mystartup_debug_echo "... Load settings for WSL"
    # shellcheck source=/dev/null
    . "$HOME/dotfiles/dots/wsl/.bashrc_wsl"
  fi
elif [ "$(uname)" == 'Darwin' ]; then
  # macOS
  mystartup_debug_echo "... Load settings for macOS"
else
  mystartup_debug_echo "... Settings not found for unkown OS"
fi


#
# Prepare tools
#

# fzf
#
# To install useful key bindings and fuzzy completion
# $(brew --prefix)/opt/fzf/install
if hash direnv 2> /dev/null; then
    # shellcheck source=/dev/null
    [ -f ~/.fzf.bash ] && source ~/.fzf.bash

    export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
    export FZF_DEFAULT_OPTS="--layout=reverse"
fi

# direnv
if hash direnv 2> /dev/null; then
  eval "$(direnv hook bash)"
  show_virtual_env() {
    if [[ -n "$VIRTUAL_ENV" && -n "$DIRENV_DIR" ]]; then
      echo "($(basename "$VIRTUAL_ENV"))"
    fi
  }
  export -f show_virtual_env
  PS1='$(show_virtual_env)'$PS1
else
  mystartup_debug_echo "direnv is not setup"
fi

# asdf
if hash asdf 2> /dev/null; then
  # Official install
  # . $HOME/.asdf/asdf.sh
  # . $HOME/.asdf/completions/asdf.bash

  ## Install from Homebrew

  # shellcheck source=/dev/null
  . "$(brew --prefix asdf)/libexec/asdf.sh"
  # shellcheck source=/dev/null
  . "$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash"
else
  mystartup_debug_echo "asdf is not setup"
fi

# fnm
if hash fnm 2> /dev/null; then
  eval "$(fnm env)"
else
  mystartup_debug_echo "fnm is not setup"
fi

# SDKMAN
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
# shellcheck source=/dev/null
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


#
# Local settings
#

BASHRC_LOCAL=$HOME/.bashrc_local
if [ -f "$BASHRC_LOCAL" ]; then
  # shellcheck source=/dev/null
  . "$BASHRC_LOCAL"
fi
